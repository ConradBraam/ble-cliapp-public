#ifndef BLE_CLIAPP_CLICOMMAND_COMMAND_HANDLER_GENERATOR_H_
#define BLE_CLIAPP_CLICOMMAND_COMMAND_HANDLER_GENERATOR_H_

#include "Command.h"

/**
 * @brief Generator of Command handler. 
 * @details User can automagically deserialize arguments for their handler as 
 * long as the arguments of the handler implement the serialization protocol. 
 * 
 * For a Command of type T, if T::handler can be of the form 
 * void(A1, A2,...,A9, const CommandResponsePtr&) as long as A1...A9 implement 
 * the serialization protocol. 
 * 
 * The entry handler with the form void(const CommandArgs&, const CommandResponsePtr&) 
 * is generated by this class: CommandHandlerGenerator<T>::handler.  
 * 
 * 
 * @code
 * struct AddCommand : public BaseCommand { 
 *  // handler with expected arguments 
 *  static void handler(uint32_t lhs, uint32_t rhs, const CommandResponsePtr& response) { 
 *    response->success(lhs + rhs);
 *  }
 * };
 * 
 * // generation of the Handler so it can be accepted by a Command.
 * 
 * Command add_command = { 
 *   .handler = &CommandHandlerGenerator::handler<AddCommand>;
 * };
 * 
 * @endcode
 */
struct CommandHandlerGenerator { 

    /**
     * @brief Command handler generated for a Command class of type CommandType. 
     */
    template<typename CommandType>
    static void handler(const CommandArgs& args, const CommandResponsePtr& response) { 
        CommandHandlerGenerator::generated_handler(args, response, CommandType::handler, CommandType::argsDescription);
    }

private:

    /**
     * @brief Traits which remove the reference of the type T in input. The 
     * result is accessible via the inner typedef type.
     */
    template<typename T>
    struct remove_reference { 
        typedef T type;
    };


    /**
     * @brief Specialization of remove_reference traits for references type.
     */
    template<typename T>
    struct remove_reference<T&> { 
        typedef T type;
    };


    /**
     * @brief Generic function used to print an error in the command response if the 
     * deserialization fail.
     * 
     * @param response The reponse to print to.
     * @param index The index of the argument causing the faillure.
     * @param argsDescription accessor to the arguments description of the command.
     */
    static void print_error(
        const CommandResponsePtr& response, 
        uint32_t index, 
        ConstArray<CommandArgDescription> (*argsDescription)()
    );


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler is already a valid form of 
     * Command::handler. The function just forward args and response to the 
     * real handler. 
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(const CommandArgs&, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        real_handler(args, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler doesn't take any arguments from the 
     * command line it just except the command response which is directly forwarded
     * to the real_handler.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        real_handler(response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect one argument of type A0, this 
     * argument is deserialized first then if the deserialization was a success, the 
     * function is called with the deserialized argument and the command response.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        real_handler(arg0, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect two argument of type A0 and A1, 
     * these arguments are deserialized first then if the deserialization was a success, 
     * the function real_handler is called with the deserialized arguments and the 
     * command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        real_handler(arg0, arg1, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, A1 and A2, 
     * these arguments are deserialized first then if the deserialization was a success, 
     * the function real_handler is called with the deserialized arguments and the 
     * command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        
        real_handler(arg0, arg1, arg2, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2 and A3. These arguments are deserialized first then if the 
     * deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        real_handler(arg0, arg1, arg2, arg3, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3 and A4. These arguments are deserialized first then if the 
     * deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        real_handler(arg0, arg1, arg2, arg3, arg4, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4 and A5. These arguments are deserialized first then if the 
     * deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4, A5 and A6. These arguments are deserialized first then 
     * if the deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5, 
             typename A6>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, A6, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        typename remove_reference<A6>::type arg6;
        if (!fromString(args[6], arg6)) {
            print_error(response, 6, argsDescription);
            return;
        }

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, arg6, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4, A5, A6 and A7. These arguments are deserialized first then 
     * if the deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5, 
             typename A6, typename A7>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, A6, A7, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        typename remove_reference<A6>::type arg6;
        if (!fromString(args[6], arg6)) {
            print_error(response, 6, argsDescription);
            return;
        }

        typename remove_reference<A7>::type arg7;
        if (!fromString(args[7], arg7)) {
            print_error(response, 7, argsDescription);
            return;
        }     

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4, A5, A6, A7 and A8. These arguments are deserialized first then 
     * if the deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5, 
             typename A6, typename A7, typename A8>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, A6, A7, A8, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        typename remove_reference<A6>::type arg6;
        if (!fromString(args[6], arg6)) {
            print_error(response, 6, argsDescription);
            return;
        }

        typename remove_reference<A7>::type arg7;
        if (!fromString(args[7], arg7)) {
            print_error(response, 7, argsDescription);
            return;
        }     

        typename remove_reference<A8>::type arg8;
        if (!fromString(args[8], arg8)) {
            print_error(response, 8, argsDescription);
            return;
        }     

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4, A5, A6, A7, A8 and A9. These arguments are deserialized first then 
     * if the deserialization was a success, the function real_handler is called 
     * with the deserialized arguments and the command response as parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5, 
             typename A6, typename A7, typename A8, typename A9>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        typename remove_reference<A6>::type arg6;
        if (!fromString(args[6], arg6)) {
            print_error(response, 6, argsDescription);
            return;
        }

        typename remove_reference<A7>::type arg7;
        if (!fromString(args[7], arg7)) {
            print_error(response, 7, argsDescription);
            return;
        }     

        typename remove_reference<A8>::type arg8;
        if (!fromString(args[8], arg8)) {
            print_error(response, 8, argsDescription);
            return;
        }     

        typename remove_reference<A9>::type arg9;
        if (!fromString(args[9], arg9)) {
            print_error(response, 9, argsDescription);
            return;
        }

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, response);
    }


    /**
     * @brief Generated handler for the Command handler real_handler.
     * @detail In this form, the real_handler expect three argument of type A0, 
     * A1, A2, A3, A4, A5, A6, A7, A8, A9 and A100. These arguments are deserialized 
     * first then if the deserialization was a success, the function real_handler 
     * is called with the deserialized arguments and the command response as 
     * parameters.
     * 
     * @param args the command line arguments 
     * @param response the command response 
     * @param real_handler The handler to call once all the arguments have been 
     * unserialized.
     * @param argsDescription Accessor to the command argsDescription. 
     */
    template<typename A0, typename A1, typename A2, typename A3, typename A4, typename A5, 
             typename A6, typename A7, typename A8, typename A9, typename A10>
    static void generated_handler(const CommandArgs& args, const CommandResponsePtr& response, 
                        void(*real_handler)(A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, const CommandResponsePtr&),
                        ConstArray<CommandArgDescription> (*argsDescription)()) { 
        typename remove_reference<A0>::type arg0;
        if (!fromString(args[0], arg0)) {
            print_error(response, 0, argsDescription);
            return;
        }

        typename remove_reference<A1>::type arg1;
        if (!fromString(args[1], arg1)) {
            print_error(response, 1, argsDescription);
            return;
        }        

        typename remove_reference<A2>::type arg2;
        if (!fromString(args[2], arg2)) {
            print_error(response, 2, argsDescription);
            return;
        }        

        typename remove_reference<A3>::type arg3;
        if (!fromString(args[3], arg3)) {
            print_error(response, 3, argsDescription);
            return;
        }        

        typename remove_reference<A4>::type arg4;
        if (!fromString(args[4], arg4)) {
            print_error(response, 4, argsDescription);
            return;
        }     

        typename remove_reference<A5>::type arg5;
        if (!fromString(args[5], arg5)) {
            print_error(response, 5, argsDescription);
            return;
        }     

        typename remove_reference<A6>::type arg6;
        if (!fromString(args[6], arg6)) {
            print_error(response, 6, argsDescription);
            return;
        }

        typename remove_reference<A7>::type arg7;
        if (!fromString(args[7], arg7)) {
            print_error(response, 7, argsDescription);
            return;
        }     

        typename remove_reference<A8>::type arg8;
        if (!fromString(args[8], arg8)) {
            print_error(response, 8, argsDescription);
            return;
        }     

        typename remove_reference<A9>::type arg9;
        if (!fromString(args[9], arg9)) {
            print_error(response, 9, argsDescription);
            return;
        }             

        typename remove_reference<A10>::type arg10;
        if (!fromString(args[10], arg10)) {
            print_error(response, 10, argsDescription);
            return;
        }     

        real_handler(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, response);
    }
};


#endif //BLE_CLIAPP_CLICOMMAND_COMMAND_HANDLER_GENERATOR_H_
